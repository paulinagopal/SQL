-- Data cleaning project. Dataset from kaggle.

SELECT * 
FROM world_layoffs.layoffs;

-- Plan for data cleaning:
-- 1. Remove duplicates
-- 2. Standardize the data
-- 3. Handle null or blank values 
-- 4. Remove unnecessary columns and rows

-- Create new table for the cleaning steps, so that the original raw data remains untouched
CREATE TABLE world_layoffs.layoffs_staging
LIKE world_layoffs.layoffs;

INSERT layoffs_staging
SELECT *
FROM world_layoffs.layoffs;

-- View all data in the new staging table
SELECT *
FROM layoffs_staging;

-- ----------------------------------
-- Identify and review duplicate rows
-- ----------------------------------

-- I will treat rows as duplicates if all of these columns are the same:
-- company, location, industry, total_laid_off, funds_raised_millions, and date

-- Add a row number to each group of potential duplicates which helps me see which rows are copies and which ones are originals
SELECT *,
	ROW_NUMBER() OVER(
    PARTITION BY company, location, industry, total_laid_off, funds_raised_millions, date
    ) AS row_num
FROM layoffs_staging;

-- Show only the duplicate rows (row number greater than 1)
-- These are the rows I plan to delete later
SELECT *
FROM (
		SELECT *,
			ROW_NUMBER() OVER(
				PARTITION BY company, location, industry, total_laid_off, funds_raised_millions, date
				ORDER BY company
                ) AS row_num
	FROM layoffs_staging 
)AS duplicates
WHERE
	row_num > 1;
    
-- ----------------------  
--  Remove duplicate rows 
-- -----------------------

-- Create a new table and add a row number column to identify duplicates
-- (I used "Copy Create Statement" and added a row_num column manually)

CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num` INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Insert data with row numbers into the new table
SELECT *
FROM layoffs_staging2;

INSERT INTO layoffs_staging2
SELECT *,
	ROW_NUMBER() OVER(
    PARTITION BY company, location, industry, total_laid_off, funds_raised_millions, date
    ) AS row_num
FROM layoffs_staging;

-- Preview duplicates to be deleted
SELECT *
FROM layoffs_staging2
WHERE row_num > 1;

-- Delete all duplicate rows (keep only row_num = 1)
DELETE 
FROM layoffs_staging2
WHERE row_num > 1;

-- Confirm duplicates are removed
SELECT *
FROM layoffs_staging2;


-- ------------------- 
-- Standardizing data
-- -------------------

-- Trim whitespace from company names
SELECT company, TRIM(company)
FROM layoffs_staging2;

UPDATE layoffs_staging2
SET company = TRIM(company);

-- Remove trailing periods from country names (e.g., "United States.")
SELECT DISTINCT country, TRIM(TRAILING '.' FROM country) 
FROM layoffs_staging2
ORDER BY 1;

UPDATE layoffs_staging2
SET country = TRIM(TRAILING '.' FROM country)
WHERE country LIKE 'United States%';

-- Convert date column to DATE format
SELECT `date`,
STR_TO_DATE(`date`, '%m/%d/%Y')
FROM layoffs_staging2;

UPDATE layoffs_staging2
SET `date` = STR_TO_DATE(`date`, '%m/%d/%Y');

SELECT `date`
FROM layoffs_staging2;

ALTER TABLE layoffs_staging2
MODIFY COLUMN `date` DATE;


-- ---------------------
-- Null or blank values 
-- ---------------------


-- Identify rows with null values in key layoff columns
SELECT *
FROM layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

-- Identify missing or blank industries
SELECT *
FROM layoffs_staging2
WHERE industry IS NULL
OR industry = ''; 

-- Convert blank industries to NULL
UPDATE layoffs_staging2
SET industry = NULL
WHERE industry = '';

-- -----------------------------------
-- Remove unnecessary columns and rows
-- -----------------------------------

-- Remove rows with no layoff data
SELECT *
FROM layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

DELETE
FROM layoffs_staging2
WHERE total_laid_off IS NULL
OR percentage_laid_off IS NULL;

-- Drop the row_num column now that it's no longer needed
ALTER TABLE layoffs_staging2
DROP COLUMN row_num;
